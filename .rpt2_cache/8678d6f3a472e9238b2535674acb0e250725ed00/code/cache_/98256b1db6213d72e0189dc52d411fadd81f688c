{"code":"import * as tslib_1 from \"tslib\";\r\nimport path from 'path';\r\nimport fs from 'fs';\r\nimport { EOL as endOfLine } from 'os';\r\nimport * as yargs from 'yargs';\r\nimport semver from 'semver';\r\nimport rimraf from 'rimraf';\r\nimport * as notifier from 'node-notifier';\r\nvar WebpackAutoVersionPlugin = /** @class */ (function () {\r\n    function WebpackAutoVersionPlugin(options) {\r\n        var _this = this;\r\n        this.init = function () {\r\n            _this.pkgPath = _this.webpackConfig.context + \"/package.json\";\r\n            _this.pkg = _this.readJsonFile(_this.pkgPath);\r\n            _this.newVersion = _this.pkg.version;\r\n            var version = _this.pkg.version;\r\n            _this.banner = _this.copyright + \" version \" + version + \"   \" + new Date().toLocaleString();\r\n        };\r\n        this.readJsonFile = function (filePath) {\r\n            var json = fs.readFileSync(filePath).toString();\r\n            return JSON.parse(json);\r\n        };\r\n        this.injectContent = function (asset) {\r\n            if (!_this.inspectContent) {\r\n                return;\r\n            }\r\n            var source = asset.source();\r\n            asset.source = function () { return source.replace(_this.template, _this.newVersion); };\r\n        };\r\n        // 清理以前版本\r\n        this.cleanupOldVersion = function () {\r\n            if (!_this.cleanup) {\r\n                return;\r\n            }\r\n            var outputPath = _this.webpackConfig.output && _this.webpackConfig.output.path;\r\n            if (outputPath) {\r\n                var outputChildDirs = fs.readdirSync(outputPath);\r\n                outputChildDirs\r\n                    .filter(function (subPath) {\r\n                    var stats = fs.statSync(outputPath + \"/\" + subPath);\r\n                    return stats.isDirectory;\r\n                })\r\n                    .forEach(function (subPath) {\r\n                    // 合法的semver并且小于当前版本号\r\n                    if (semver.valid(subPath) && semver.lt(subPath, _this.pkg.version)) {\r\n                        rimraf(outputPath + \"/\" + subPath, function (err) {\r\n                            notifier.notify({\r\n                                title: '清除旧版本出错',\r\n                                message: err.message\r\n                            });\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        this.autoIncreaseVersion = function () {\r\n            var _ = yargs.argv._;\r\n            var version = _this.pkg.version;\r\n            var isMinor = _.indexOf('minor') !== -1;\r\n            var isMajor = _.indexOf('major') !== -1;\r\n            if (isMinor) {\r\n                _this.newVersion = semver.inc(version, 'minor') || version;\r\n                _this.pkg.version = _this.newVersion;\r\n                return;\r\n            }\r\n            if (isMajor) {\r\n                _this.newVersion = semver.inc(version, 'major') || version;\r\n                _this.pkg.version = _this.newVersion;\r\n                return;\r\n            }\r\n            _this.newVersion = semver.inc(version, 'patch') || version;\r\n            _this.pkg.version = _this.newVersion;\r\n        };\r\n        this.persistVersion = function () {\r\n            var pkgStr = JSON.stringify(_this.pkg, null, _this.space);\r\n            fs.writeFileSync(_this.pkgPath, pkgStr);\r\n        };\r\n        this.injectJs = function (asset) {\r\n            var versionTag = \"/**  \" + _this.banner + \"*/\";\r\n            var source = versionTag + endOfLine + asset.source();\r\n            asset.source = function () { return source; };\r\n        };\r\n        this.injectCss = function (asset) {\r\n            var versionTag = \"/**  \" + _this.banner + \"   */\";\r\n            var source = versionTag + endOfLine + asset.source();\r\n            asset.source = function () { return source; };\r\n        };\r\n        this.injectHtml = function (asset) {\r\n            var versionTag = \"<!--  \" + _this.banner + \"   -->\";\r\n            var source = versionTag + endOfLine + asset.source();\r\n            asset.source = function () { return source; };\r\n        };\r\n        this.replaceVersionTag = function (filename) {\r\n            if (!_this.filenameMark) {\r\n                return filename;\r\n            }\r\n            return filename.replace(_this.filenameMark, \"v\" + _this.pkg.version);\r\n        };\r\n        this.apply = function (complier) {\r\n            // 使用在HtmlWebpackPlugin插件前，无html资源\r\n            var that = _this;\r\n            _this.webpackConfig = complier.options;\r\n            _this.init();\r\n            _this.autoIncreaseVersion();\r\n            var version = _this.pkg.version;\r\n            complier.plugin('emit', function (compilation, callback) {\r\n                var newAssets = {};\r\n                Object.keys(compilation.assets).forEach(function (filename) {\r\n                    // 得到每一个资源\r\n                    var ext = path.extname(filename);\r\n                    var asset = compilation.assets[filename];\r\n                    that.injectContent(asset);\r\n                    var newFilename = that.replaceVersionTag(filename);\r\n                    switch (ext) {\r\n                        case '.js':\r\n                            newAssets = tslib_1.__assign({}, newAssets, (_a = {}, _a[version + \"/\" + newFilename] = asset, _a));\r\n                            that.injectJs(asset);\r\n                            break;\r\n                        case '.css':\r\n                            newAssets = tslib_1.__assign({}, newAssets, (_b = {}, _b[version + \"/\" + newFilename] = asset, _b));\r\n                            that.injectCss(asset);\r\n                            break;\r\n                        case '.html':\r\n                            newAssets = tslib_1.__assign({}, newAssets, (_c = {}, _c[newFilename] = asset, _c));\r\n                            that.injectHtml(asset);\r\n                            break;\r\n                        default:\r\n                            newAssets = tslib_1.__assign({}, newAssets, (_d = {}, _d[version + \"/\" + newFilename] = asset, _d));\r\n                            break;\r\n                    }\r\n                    var _a, _b, _c, _d;\r\n                });\r\n                compilation.assets = newAssets;\r\n                compilation.chunks.forEach(function (chunk) {\r\n                    chunk.files = chunk.files\r\n                        .filter(function (filename) { return path.extname(filename) !== '.html'; })\r\n                        .map(function (filename) { return version + \"/\" + that.replaceVersionTag(filename); })\r\n                        .concat(chunk.files.filter(function (filename) { return path.extname(filename) === '.html'; }));\r\n                });\r\n                callback();\r\n            });\r\n            complier.plugin('failed', function (err) {\r\n                notifier.notify({\r\n                    title: 'WebpackAutoVersionPlugin',\r\n                    message: err.message\r\n                });\r\n            });\r\n            complier.plugin('done', function () {\r\n                // 是否清理旧版本目录\r\n                that.cleanupOldVersion();\r\n                // 编译完成后版本号记录到pkg中\r\n                that.persistVersion();\r\n            });\r\n        };\r\n        // 文件名替换标记 [version] -> v1.2.2\r\n        this.filenameMark = options.filenameMark;\r\n        // 版权名称\r\n        this.copyright = options.copyright || 'DUOKE-GM';\r\n        // package.json路径\r\n        this.pkgPath = '';\r\n        // package.json内容\r\n        this.pkg = { version: '' };\r\n        this.banner = '';\r\n        // 保存的时候格式化package.json的indent\r\n        this.space = options.space || 2;\r\n        // 是否自动清理老版本\r\n        this.cleanup = options.cleanup || false;\r\n        // 是否检测资源内的标签\r\n        this.inspectContent = options.inspectContent || !!options.template;\r\n        // 自定义资源内版本替换模板 [DUOKE-GM]version[/DUOKE-GM]\r\n        this.template = options.template || \"[\" + this.copyright + \"]version[/\" + this.copyright + \"]\";\r\n        this.webpackConfig = { context: '' };\r\n        this.newVersion = '';\r\n    }\r\n    return WebpackAutoVersionPlugin;\r\n}());\r\nexport default WebpackAutoVersionPlugin;\r\n"}
